Spring JPA Entity Mappings


------------------------------->
1) Unidirectional One to One
2) Bidirectional One to One 

3) Unidirectional One to Many
4) Unidirectional Many to One

5) Bidirectional Many to One

6) Unidirectional Many to Many 
7) Bidirectional Many to Many
------------------------------->






------------------------------->
http://localhost:8098/h2-console

------------------------------->


1) One To One 


2 tables got created,
its going to generate foreign key inside customer table, hibernate is going to 
create column for us


SELECT * FROM CUSTOMER;
--------------------------
ID  	NAME  	ITEM_ID  
1	    srini	     2
--------------------------


SELECT * FROM ITEM;
--------------------------
ID  	NAME  
2	   mobile
--------------------------






-------------------------------> 
code Level 
-------------
customer.java
---------------

@OneToOne(cascade = CascadeType.ALL)
    private Item item;
    
-------------------------------> 
    
    
    
    
    
    
    
    
    
    
    



if you are not satisfied with this
foreign key column generated by hibernate
    
so we can use @joincolumn name
    
    
    
if you want to use  Bidirectional way
  






 
2)
-------------------------------> 
    at customer side
    -----------------
    
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "fk_item")
    private Item item;
    
    
    at Item side 
    --------
    
    @OneToOne(cascade = CascadeType.ALL, mappedBy = "item")
    private Customer customer;

-------------------------------> 




define one to one assiciation in item table

and also we have to tell the hibernate.. mapped by item..

which means.. mapped by item will be available in the customer...




which will have the joining column relationship.... fk_item




---->

its going to generate 2 tables





SELECT * FROM CUSTOMER;
--------------------------
ID  	NAME  	FK_ITEM  
1	    srini	2
--------------------------


SELECT * FROM ITEM;
--------------------------
ID  	NAME  
2	   mobile
--------------------------






SELECT * FROM CUSTOMER;
ID  	NAME  	FK_ITEM  
1	   srini	2
4	   teju	null



SELECT * FROM ITEM;

ID  	NAME  
2	mobile
3	macbook



 because above foreign key present in customer table
 but we are saving in item repository
-------------------------->
Customer c1 = new Customer("teju");
Item i1 = new Item("macbook");

i1.setCustomer(c1);
itemRepository.save(i1);


SELECT * FROM CUSTOMER;
ID  	NAME  	FK_ITEM  
2	    teju	null



SELECT * FROM ITEM;
ID  	NAME  
1	macbook

--------------------------

























3) 
by using joining table

only at customer side 



Coding
--------------------------
@OneToOne(cascade = CascadeType.ALL)
    @JoinTable(name="customer_item",
    joinColumns = { @JoinColumn(name = "customer_id") },
    inverseJoinColumns = { @JoinColumn(name = "item_id")})
    private Item item;
--------------------------




Its going to create 3 tables



SELECT * FROM CUSTOMER;
--------------------------
ID  	NAME  
1	    srini
--------------------------

SELECT * FROM ITEM;
--------------------------
ID  	NAME  
2	   mobile
--------------------------

SELECT * FROM CUSTOMER_ITEM;
--------------------------
ITEM_ID  	CUSTOMER_ID  
2				1
--------------------------






















----------------------------------------------------
4) 

Let's see 




i)
--------------------------
OneToMany mapping with joining table




customer     customer_item      item
				customer_id
				item_id
				
				


customer can have multiple items


so whenever we are defining one to many association at customer Entity
				

so if you are not defining any joining column inside the customer  entity 

then hibernate automatically creates customer_item

and provides 2 foreign keys , inside the joining table








ii)
--------------------------
 Unidirectional One to Many mapping with @JoinColumn

if we are providing @joincolumn inside at customer entity



so this time it will take the joining column name 
and create foreign key inside this item table






iii)
--------------------------				
Unidirectional Many to One mapping


we defined many to one mapping inside  item Entity

we define this association @ManyToOne with  joining column customer_id

so it creates customer id inside item table







iv)

--------------------------	
Bi directional Many to One mapping



Reference side 									Owning side
customer 										item


mappedBy="customer"								@JoinColumn(name="customer_id")





here we have customer with multiple items


at many side ... we define   with   @joincolumn




many side is always we are saying ..this is owning side



mapped by 

here means... we have a customer inside item entity

that has association many to one

which has joining column customer_id



------>









Example:4
----------------------------------------------------
so we have customer with multiple items
----------------------------------------------------



3 tables got created






SELECT * FROM CUSTOMER;
----------------------------------------------------
ID  	NAME  
1	   srini
----------------------------------------------------


SELECT * FROM ITEM;
----------------------------------------------------
ID  	NAME  
2	mobile
3	macbook
----------------------------------------------------


SELECT * FROM CUSTOMER_ITEMS;
----------------------------------------------------
CUSTOMER_ID  	ITEMS_ID  
1	             2
1	             3
----------------------------------------------------







code Level
----------

@OneToMany(cascade = CascadeType.ALL)
    private List<Item> items= new ArrayList<>();
    
  ----------------------------------------------------
  
  
  only at Customer side
  
  
  
  
    






5)

one to many with join column


  ----------------------------------------------------
@OneToMany(cascade = CascadeType.ALL)
    @JoinColumn(name = "customer_id")
    private List<Item> items= new ArrayList<>();
    
    ---------------------------------------------------- 



--> it created 2 tables




SELECT * FROM CUSTOMER;
----------------------------------------------------
ID  	 NAME  
1	    srini
----------------------------------------------------

SELECT * FROM ITEM;
----------------------------------------------------
ID  	NAME  	CUSTOMER_ID  
2		mobile	 	1
3		macbook 	1
----------------------------------------------------









6)

Many to one




Item.java
----------------------------------------------------
@ManyToOne(cascade = CascadeType.ALL)
    private Customer customer;
    
 ----------------------------------------------------   
    




here item will have customers








customer.java
 ---------------------------------------------------- 
@OneToMany(cascade = CascadeType.ALL, mappedBy = "customer")
    private List<Item> items= new ArrayList<>();
    
    
    
    
  --->
  
  inside this one to many , we have to define... mappedBy
  
  we are not maintaining any Reference
    
 
  
  here it means... we are telling go and check in item table 
  with the name cusomter
  
    

item.java
 ---------------------------------------------------- 
@ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "customer_id")
    private Customer customer;
    
    
    
    
    
----------------------------------------------------
Customer customer = new Customer("srini");
		Item item1 = new Item("mobile");
		Item item2 = new Item("macbook");

		customer.getItems().add(item1);
		customer.getItems().add(item2);


		item1.setCustomer(customer);
		item2.setCustomer(customer);


		customerRepository.save(customer);

----------------------------------------------------






created 2 tables




SELECT * FROM CUSTOMER;
----------------------------------------------------
ID  	NAME  
1	srini



SELECT * FROM ITEM;
----------------------------------------------------
ID  	NAME  	CUSTOMER_ID  
2	   mobile	1
3	 macbook	1








only item table has the customer relationship





















7)

Many to Many 





customer     cusomter_item     item


				customer_id
				item_id
				
				
				
				
				


many customers can purchase many items





-->
if we define many to many to inside customer Entity

so hibernate automatically 
will create  customer_item table






--->
if we are not satisfied with this joining table

we can customize this joining table by using 


@joiningtable  at customer Entity





so coming to Bidirectional  many to many mapping

either we can define at owning side or at customer side


both side it will work





-->
when you are working with many to many use Hashset











only at customer side


customer.java
----------------------------------------------------

@ManyToMany(cascade = CascadeType.ALL)
    private Set<Item> items= new HashSet<>();				
				
----------------------------------------------------


main.run
----------------------------------------------------
Customer customer = new Customer("srini");
		Item item1 = new Item("mobile");
		Item item2 = new Item("macbook");

		customer.getItems().add(item1);
		customer.getItems().add(item2);
		
		customerRepository.save(customer);

----------------------------------------------------




3 tables got created


SELECT * FROM CUSTOMER;
----------------------------------------------------
ID  	NAME  
1	srini
----------------------------------------------------


SELECT * FROM ITEM;
----------------------------------------------------
ID  	NAME  
2	 macbook
3	 mobile
----------------------------------------------------


SELECT * FROM CUSTOMER_ITEMS;
----------------------------------------------------
CUSTOMER_ID  	ITEMS_ID  
1	             2
1	             3
----------------------------------------------------



CUSTOMER_ITEMS table created automatically









if you are not satisfied with this

we can customize with joining table at customer side






8)

Many to Many join table


only used at customer side


code level
----------------------------------------------------
@ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name= "customer_item",
               joinColumns = { @JoinColumn(name = "customer_fk")},
               inverseJoinColumns = { @JoinColumn(name="items_fk")}
               )
    private Set<Item> items= new HashSet<>();


----------------------------------------------------


SELECT * FROM CUSTOMER;
ID  	NAME  
1	srini




SELECT * FROM ITEM;
ID  	NAME  
2	mobile
3	macbook





SELECT * FROM CUSTOMER_ITEM;
CUSTOMER_FK  	ITEMS_FK  
1	2
1	3

















8)

Many to Many  with Bidirectional




at item side






we can define mapped by at customer side or item side, both works
mappedBy = "item"






customer.java
----------------------------------------------------

@ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name= "customer_item",
               joinColumns = { @JoinColumn(name = "customer_fk")},
               inverseJoinColumns = { @JoinColumn(name="items_fk")}
               )
    private Set<Item> items= new HashSet<>();


----------------------------------------------------



item.java
----------------------------------------------------
 @ManyToMany(cascade = CascadeType.ALL, mappedBy = "item")

    private Set<Customer> customters = new HashSet<>();

----------------------------------------------------



======
Note:
=======
    //private Set<Item> items= new HashSet<>();  --> we defined this at customer side as "items"
    // so here this side use as , mappedBy = "items"






----------------------------------------------------

3 tables got created



SELECT * FROM CUSTOMER;
----------------------------------------------------
ID  	NAME  
1		srini



SELECT * FROM CUSTOMER_ITEM;
----------------------------------------------------
CUSTOMER_FK  	ITEMS_FK  
1	            2
1	 			3




SELECT * FROM ITEM;
----------------------------------------------------
ID  	NAME  
2		macbook
3		mobile


----------------------------------------------------






























































    
    
    
     





